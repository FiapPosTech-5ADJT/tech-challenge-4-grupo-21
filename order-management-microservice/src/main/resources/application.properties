spring.application.name=order-management

server.port=8082

springdoc.swagger-ui.path=/swagger

spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:123456}
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:4000/orders_db}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# create-drop: only for development
# validate: best for production
spring.jpa.hibernate.ddl-auto=update

customer-management.url=${CUSTOMER_MANAGEMENT_URL:http://localhost:8080}
stock-products.url=${STOCK_PRODUCTS_URL:http://localhost:8081}

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

queue.atualizar-estoque.name=atualizar-estoque-queue
queue.atualizar-estoque.exchange.name=atualizar-estoque-dlx
queue.atualizar-estoque-dlx.key=atualizar-estoque-dlx-key

queue.logistica.name=logistica-queue
queue.logistica.exchange.name=logistica-dlx
queue.logistica-dlx.key=logistica-dlx-key

spring.cloud.stream.bindings.atualizarEstoque-out-0.destination=atualizar-estoque-dlx
spring.cloud.stream.rabbit.bindings.atualizarEstoque-out-0.consumer.bindingRoutingKey=atualizar-estoque-dlx-key
spring.cloud.stream.rabbit.bindings.atualizarEstoque-out-0.consumer.exchangeType=direct
spring.cloud.stream.rabbit.bindings.atualizarEstoque-out-0.producer.routingKeyExpression='atualizar-estoque-dlx-key'

spring.cloud.stream.bindings.logistica-out-0.destination=logistica-dlx
spring.cloud.stream.rabbit.bindings.logistica-out-0.consumer.bindingRoutingKey=logistica-dlx-key
spring.cloud.stream.rabbit.bindings.logistica-out-0.consumer.exchangeType=direct
spring.cloud.stream.rabbit.bindings.logistica-out-0.producer.routingKeyExpression='logistica-dlx-key'
